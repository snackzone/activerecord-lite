c
exit
relation.klass.has_association?(includes_params)
c
n
exit
table_name
f_k
table_name
includes_table
n
p_k
n
exit
includes_table
n
c
includes_table
n
c
exit
assoc.table_name
assoc
n
exit
in_ids
includes_table
n
c
table_name
includes_table
n
in_ids
n
c
Cat.table_name
table_name
Cat.columns
f_k
table_name
has_many
includes_table
n
c
n
table_name
includes_table
has_many
n
assoc.class == HasManyOptions
assoc.class
has_many
n
exit
self.klass.assoc_options[includes_params].class
self.klass.assoc_options[includes_params]
self.klass.assoc_options
self.klass
assoc_options
f_k
table_name
n
c
exit
c
exit
base.collection.first.send(assoc_options.primary_key)
base.collection.first.send(assoc_options[:primary_key])
base.collection.first
h = base.collection.first
h = base.first
base
c.send(assoc_options.foreign_key)
c = included.first
assoc_options
included
i_sql_obj
s
assoc_options
n
c
exit
base.klass
sql_object.class.assoc_options[base.includes_params].class
sql_object.class.assoc_options[base.includes_params]
base.includes_params
sql_object.class.assoc_options
sql_object.class
sql_object
s
n
c
relation.collection.first.cats
relation
n
exit
n
sql_object
s
n
c
base.collection.each {|n| p n.id}
base.collection
base
n
c
n
c
n
c
h = base.collection.first
base.collection.first
base.includes_params
base.klass.includes_params
included
base
exit
relation_included
relation_base
exit
relation
n
c
relation.klass.assoc_options
relation.klass
included
relation
n
c
n
c
n
c
n
exit
exot
relation
includes_params
relation.klass.assoc_options
relation.klass
relation.klas
relation.klass.assoc_options[includes_params]
self
relation
klass
n
c
n
exit
relation
results
n
self
results
n
exit
c
self
seld
c
self
sql_object.parse_all(results)
sql_object = assoc.model_class
sql_object.parse_all(results)
sql_object = assoc.model_class.new
assoc.model_class
assoc.class_name
assoc
klass.new
klass
assoc.model_class
assoc
results
n
c
results
n
in_ids
n
exit
table_name
n
c
klass.assoc_options[includes_params].table_name
klass.assoc_options[includes_params]
includes_params
f_k
includes_params
in_ids.join(", ")
in__ids.join(", ")
in_ids
n
c
n
c
n
in_ids
n
exit
relation.collection.each {|c| p c.id}
n
in_ids
relation.collection
relation
n
relation
exit
c
relation.to_a
in_ids
n
f_k
n
relation
c
klass.assoc_options[includes_params.first].foreign_key
klass.assoc_options[includes_params.first]
klass.assoc_options[includes_params]
includes_params
relation.klass.assoc_options.keys.include?(:cats)
relation.klass.assoc_options.keys.includes?(:cats)
relation.klass.assoc_options.keys
relation.klass
r.first.class.assoc_options
r.first.class
r.first.cats
r.first.model_class
r.first
r.class
r = relation.to_a
relation
h = relation.to_a.first
h = humans.first
humans = relation.to_a
h = relation.first
relation.first.model_class
relation.to_a
relation
c
relation.to_a
relation
r = relation.to_a
includes_params.model_class
includes_params
self.includes_params
relation
c
n
self
results
includes_params
n
results
self.sql_count
n
c
