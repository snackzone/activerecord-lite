c
exit
sql_limit
c
exit
parse_all(results)exit
results
result
n
c
sql_limit
sql_count
c
exit
source_name
source_options
source_table
n
c
Human.where(through_fk => 1)
through_fk
through_options.model_class
n
c
exit
exi
Human.find(1).send("cats")
source_options.table_name
source_options
source_table
through_fk
key_val
source_options.model_class
source_options.model_clas
source_options
self.send(through_pk)
through_options.model_class.includes(self.class).where(through_fk => through_pk).to_a
                             .where(through_fk => through_pk)
through_options.model_class.includes(self.class)
through_options.primary_key
through_options.foreign_key
self.class
self.model_class
self
through_options.model_class
Human.includes(:house).where(house_id: 1).to_a
Humans.includes(:house).where(house_id: 1).to_a
through_table
Cat.includes(:humans).to_a
source_options.model_class
source_options
key_val
through_fk
through_options.model_class
through_options
source_options.model_class
n
c
exit
relation.klass.has_association?(includes_params)
c
n
exit
table_name
f_k
table_name
includes_table
n
p_k
n
exit
includes_table
n
c
includes_table
n
c
exit
assoc.table_name
assoc
n
exit
in_ids
includes_table
n
c
table_name
includes_table
n
in_ids
n
c
Cat.table_name
table_name
Cat.columns
f_k
table_name
has_many
includes_table
n
c
n
table_name
includes_table
has_many
n
assoc.class == HasManyOptions
assoc.class
has_many
n
exit
self.klass.assoc_options[includes_params].class
self.klass.assoc_options[includes_params]
self.klass.assoc_options
self.klass
assoc_options
f_k
table_name
n
c
exit
c
exit
base.collection.first.send(assoc_options.primary_key)
base.collection.first.send(assoc_options[:primary_key])
base.collection.first
h = base.collection.first
h = base.first
base
c.send(assoc_options.foreign_key)
c = included.first
assoc_options
included
i_sql_obj
s
assoc_options
n
c
exit
base.klass
sql_object.class.assoc_options[base.includes_params].class
sql_object.class.assoc_options[base.includes_params]
base.includes_params
sql_object.class.assoc_options
sql_object.class
sql_object
s
n
c
relation.collection.first.cats
relation
n
exit
n
sql_object
s
n
c
base.collection.each {|n| p n.id}
base.collection
base
n
c
n
c
n
c
h = base.collection.first
base.collection.first
base.includes_params
base.klass.includes_params
included
base
exit
relation_included
relation_base
exit
relation
n
c
relation.klass.assoc_options
relation.klass
included
relation
n
c
n
c
n
c
n
exit
exot
relation
includes_params
relation.klass.assoc_options
relation.klass
relation.klas
relation.klass.assoc_options[includes_params]
self
relation
klass
n
c
n
exit
relation
results
n
self
results
n
exit
c
self
seld
c
self
sql_object.parse_all(results)
sql_object = assoc.model_class
sql_object.parse_all(results)
sql_object = assoc.model_class.new
assoc.model_class
assoc.class_name
assoc
klass.new
klass
assoc.model_class
assoc
results
n
c
results
n
in_ids
n
exit
table_name
n
c
klass.assoc_options[includes_params].table_name
klass.assoc_options[includes_params]
includes_params
f_k
includes_params
in_ids.join(", ")
in__ids.join(", ")
in_ids
n
c
n
c
n
in_ids
n
exit
